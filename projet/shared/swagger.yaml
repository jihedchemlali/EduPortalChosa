swagger: "2.0"
info:
  description: "This is a sample API"
  version: "V0.0.37"
  title: "CHOSA API"
host: "localhost:8080"
basePath: "/api"
tags:
  - name: "user"
    description: "Operations about user"
  - name: "child"
    description: "Operations about child"
  - name: "actuality-child"
    description: "Operations about actuality"
  - name: "activity-child"
    description: "Operations about activity"
  - name: "training-center"
    description: "Operations about Training Center"
  - name: "auth"
    description: "Authentification"
  - name: "file"
    description: "operation about file"
schemes:
  - "http"
  - "https"
paths:
  /users:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users/:
    get:
      tags:
        - "user"
      summary: "Find All users"
      description: "Returns a single user"
      operationId: "getAllUsers"
      produces:
        - "application/json"
      parameters:
        - name: offset
          description: offset liste
          type: "integer"
          in: query
          required: true
        - name: size
          description: The numbers of items to return
          type: string
          in: query
          required: true
      responses:
        200:
          description: "List of users"
        404:
          description: "users not found"
  /users/{id}:
    patch:
      tags:
        - "user"
      summary: "Update an existing user"
      description: ""
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: id
          description: User id
          type: string
          in: path
          required: true
        - name: id
          description: User properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "User updateted"
    get:
      tags:
        - "user"
      summary: "Find child by ID"
      description: "Returns a single child"
      operationId: "getUserById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of child to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        404:
          description: "child not found"
    delete:
      tags:
        - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "integer"
          format: "int64"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /users/{id}/children:
    get:
      tags:
        - "user"
      summary: "uploads an image"
      description: ""
      operationId: "getParentChildren"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of parent to update"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
  /users/reset-password:
    post:
      tags:
        - "user"
      summary: "reset password"
      description: "to reset your password."
      operationId: "sendForgetPasswordMail"
      produces:
        - "application/json"
      parameters:
        - in: "query"
          name: "email"
          description: "user email"
          required: true
          type: "string"
      responses:
        default:
          description: "successful operation"
  /users/{id}/centers:
    get:
      tags:
        - "user"
      summary: "Centre of user"
      description: ""
      operationId: "getCenterByUserId"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of center admin"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
  /users/{id}/reset-password:
    patch:
      tags:
        - "user"
      summary: "rest password by userId"
      description: ""
      operationId: "updatePassword"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of center admin"
          required: true
          type: "integer"
        - name: "oldPassword"
          in: "query"
          description: "ancien password"
          required: true
          type: "string"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Created child object"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        200:
          description: "successful operation"
  /users/contact:
    post:
      tags:
        - "user"
      summary: "contacter l'admin"
      description: ""
      operationId: "sendContactMail"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "query"
          description: "votre addresse email"
          required: true
          type: "string"
        - name: "message"
          in: "query"
          description: "votre message"
          required: true
          type: "string"
        - name: "name"
          in: "query"
          description: "votre nom"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"
  /users/{id}/files:
    patch:
      tags:
        - "user"
      summary: "uploads an image for user"
      description: ""
      operationId: "uploadFile"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        200:
          description: "successful operation"
  /users/validation:
    put:
      tags:
        - "user"
      summary: "validation account"
      description: ""
      operationId: "validateAccount"
      produces:
        - "application/json"
      parameters:
        - name: "token"
          in: "query"
          description: "votre addresse email"
          required: true
          type: "string"
        - name: "email"
          in: "query"
          description: "votre message"
          required: true
          type: "string"
      responses:
        200:
          description: "successful operation"

        401:
          description: "Expired token"
        500:
          description: "Error"
  /children:
    post:
      tags:
        - "child"
      summary: "Create child"
      description: "This can only be done by the logged in user."
      operationId: "addChild"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created child object"
          required: true
          schema:
            $ref: "#/definitions/Child"
      responses:
        default:
          description: "successful operation"
  /children/:
    get:
      tags:
        - "child"
      summary: "Find All children"
      description: "Returns all children"
      operationId: "getAllChildren"
      produces:
        - "application/json"
      parameters:
        - name: offset
          description: offset liste
          type: "integer"
          in: query
          required: true
        - name: size
          description: The numbers of items to return
          type: string
          in: query
          required: true
      responses:
        200:
          description: "List of children"
        404:
          description: "Children not found"

  /children/{id}:
    patch:
      tags:
        - "child"
      summary: "Update an existing user"
      description: ""
      operationId: "childUpdate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of child to update"
          required: true
          type: "integer"
          format: "int64"
        - in: "body"
          name: "body"
          description: "Update child object"
          required: true
          schema:
            $ref: "#/definitions/Child"
      responses:
        200:
          description: "Child updateted"
    get:
      tags:
        - "child"
      summary: "Find child by ID"
      description: "Returns a single child"
      operationId: "getChildById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of child to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Child"
        404:
          description: "child not found"
    delete:
      tags:
        - "child"
      summary: "Delete child"
      description: "This can only be done by the logged in user."
      operationId: "deleteChild"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "Child not found"
  /children/{id}/files:
    patch:
      tags:
        - "child"
      summary: "uploads an image for user"
      description: ""
      operationId: "addFileToChild"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        200:
          description: "successful operation"
  /children/{id}/centers:
    get:
      tags:
        - "child"
      summary: "get children of center"
      description: ""
      operationId: "getChildCenter"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of center admin"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
  /children/{id}/actualities:
    get:
      tags:
        - "child"
      summary: "get children of center"
      description: ""
      operationId: "getActualitiesOfChild"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of center admin"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
  /actualities:
    post:
      tags:
        - "actuality-child"
      summary: "Create actuality"
      description: "This can only be done by the logged in user."
      operationId: "addActulity"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created actualityChild object"
          required: true
          schema:
            $ref: "#/definitions/ActualityChild"
      responses:
        default:
          description: "successful operation"

    get:
      tags:
        - "actuality-child"
      summary: "Find All actualities"
      description: "Returns all actualities"
      operationId: "getAllActualitiesChild"
      produces:
        - "application/json"
      parameters:
        - name: offset
          description: offset liste
          type: "integer"
          in: query
          required: true
        - name: size
          description: The numbers of items to return
          type: string
          in: query
          required: true
      responses:
        200:
          description: "List of actualities"
        404:
          description: "actualities not found"
  /actualities/{id}:
    patch:
      tags:
        - "actuality-child"
      summary: "Update an existing actualityChild"
      description: ""
      operationId: "actualityUpdate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: id
          description: actualityChild id
          type: string
          in: path
          required: true
        - name: id
          description: actualityChild properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/ActualityChild"
      responses:
        200:
          description: "User updateted"
    get:
      tags:
        - "actuality-child"
      summary: "Find actualityChild by ID"
      description: "Returns a single actualityChild"
      operationId: "getActualityById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of actualityChild to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/ActualityChild"
        404:
          description: "actualityChild not found"
    delete:
      tags:
        - "actuality-child"
      summary: "Delete actualityChild"
      description: "This can only be done by the logged in user."
      operationId: "deleteActuality"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "actualityChild not found"
  /actualities/{id}/files:
    patch:
      tags:
        - "actuality-child"
      summary: "uploads an image for user"
      description: ""
      operationId: "addFileToActuality"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        200:
          description: "successful operation"
  /activities/:
    post:
      tags:
        - "activity-child"
      summary: "Create actuality"
      description: "This can only be done by the logged in user."
      operationId: "addActivity"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created activityChild object"
          required: true
          schema:
            $ref: "#/definitions/Activity"
      responses:
        default:
          description: "successful operation"
    get:
      tags:
        - "activity-child"
      summary: "Find All activities"
      description: "Returns all activities"
      operationId: "getAllActivities"
      produces:
        - "application/json"
      parameters:
        - name: offset
          description: offset liste
          type: "integer"
          in: query
          required: true
        - name: size
          description: The numbers of items to return
          type: string
          in: query
          required: true
      responses:
        200:
          description: "List of activitiesChild"
        404:
          description: "activitiesChild not found"
  /activities/{id}:
    patch:
      tags:
        - "activity-child"
      summary: "Update an existing activityChild"
      description: ""
      operationId: "activityUpdate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: id
          description: activityChild id
          type: string
          in: path
          required: true
        - name: id
          description: activityChild properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/Activity"
      responses:
        200:
          description: "User updateted"
    get:
      tags:
        - "activity-child"
      summary: "Find activityChild by ID"
      description: "Returns a single activityChild"
      operationId: "getActivityById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of activityChild to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Activity"
        404:
          description: "activityChild not found"
    delete:
      tags:
        - "activity-child"
      summary: "Delete activityChild"
      description: "This can only be done by the logged in user."
      operationId: "deleteActivity"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid id supplied"
        404:
          description: "activityChild not found"

  /centers:
    post:
      tags:
        - "training-center"
      summary: "Create actuality"
      description: "This can only be done by the logged in user."
      operationId: "addCenter"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created trainingCenter object"
          required: true
          schema:
            $ref: "#/definitions/TrainingCenter"
      responses:
        default:
          description: "successful operation"
  /centers/{id}:
    patch:
      tags:
        - "training-center"
      summary: "Update an existing trainingCenter"
      description: ""
      operationId: "trainingCenterUpdate"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: id
          description: trainingCenter id
          type: string
          in: path
          required: true
        - name: id
          description: trainingCenter properties
          in: body
          required: true
          schema:
            $ref: "#/definitions/TrainingCenter"
      responses:
        200:
          description: "trainingCenter updateted"
    get:
      tags:
        - "training-center"
      summary: "Find trainingCenter by ID"
      description: "Returns a single trainingCenter"
      operationId: "getCenterById"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of trainingCenter to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/TrainingCenter"
        404:
          description: "trainingCenter not found"
    delete:
      tags:
        - "training-center"
      summary: "Delete trainingCenter"
      description: "This can only be done by the logged in user."
      operationId: "deleteTrainingCenter"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "The name that needs to be deleted"
          required: true
          type: "string"
      responses:
        400:
          description: "Invalid id supplied"
  /centers/:
    get:
      tags:
        - "training-center"
      summary: "Find All trainingCenters"
      description: "Returns all trainingCenters"
      operationId: "getAllTrainingCenter"
      produces:
        - "application/json"
      parameters:
        - name: offset
          description: offset liste
          type: "integer"
          in: query
          required: true
        - name: size
          description: The numbers of items to return
          type: string
          in: query
          required: true
      responses:
        200:
          description: "List of trainingCenters"
        404:
          description: "trainingCenters not found"
  /centers/{id}/files:
    patch:
      tags:
        - "training-center"
      summary: "uploads an image for user"
      description: "upload file to center"
      operationId: "addFileToEcole"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          type: "integer"
          format: "int64"
        - name: "file"
          in: "formData"
          description: "file to upload"
          required: false
          type: "file"
      responses:
        200:
          description: "successful operation"
  /centers/search:
    get:
      tags:
        - "training-center"
      summary: "search liste"
      description: "find List of centers by name"
      operationId: "getCenterByName"
      produces:
        - "application/json"
      parameters:
        - name: "name"
          in: "query"
          description: "name of center"
          required: true
          type: "string"
        - name: "size"
          in: "query"
          description: "file to upload"
          required: false
          type: "integer"
          format: "int64"
        - name: "offset"
          in: "query"
          required: true
          type: "integer"
          format: "int32"
      responses:
        200:
          description: "successful operation"
  /centers/{id}/children:
    get:
      tags:
        - "training-center"
      summary: "uploads an image for user"
      description: "liste des enfants du centre"
      operationId: "getCenterChildren"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of user to update"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
  /authenticate/signin:
    post:
      tags:
        - "auth"
      summary: "authenticate via JWT"
      description: ""
      operationId: "signin"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: "#/definitions/UserLogin"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/UserLogin"
        403:
          description: "access denied"
        500:
          description: "server error"
  /files/{id}:
    get:
      tags:
        - "file"
      summary: "download an image"
      description: "liste des enfants du centre"
      operationId: "downloadDocument"
      consumes:
        - "multipart/form-data"
      produces:
        - "application/json"
      parameters:
        - name: "id"
          in: "path"
          description: "ID of file to download"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  User:
    type: "object"
    required:
      - "nom"
      - "prenom"
      - "email"
      - "user_picture_file"
      - "adress"
      - "birth_date"
      - "userPassword"
      - "STATUS"
      - "phone"
      - "country"
    properties:
      id:
        type: "integer"
        format: "int64"
      nom:
        type: "string"
      prenom:
        type: "string"
      email:
        type: "string"
      status:
        type: "string"
        description: "User Status"
        enum:
          - "SIGNUP"
          - "VALIDATE"
          - "SUSPENDED"
      userPassword:
        type: "string"
      birth_date:
        type: "string"
        format: "date"
      user_picture_file:
        type: "integer"
        format: "int64"
      adress:
        type: "string"
      ville:
        type: "string"
      country:
        type: "string"
      phone:
        type: "string"
        format: "int32"
      google_Id:
        type: "string"
        format: "int64"
      facebook_Id:
        type: "string"
        format: "int64"
    xml:
      name: "User"
  Child:
    type: "object"
    required:
      - "prenom"
      - "birth_date"
      - "sexe"
    properties:
      id:
        type: "integer"
        format: "int64"
      prenom:
        type: "string"
      code:
        type: "string"
      picture:
        type: "integer"
        format: "int64"
      birth_date:
        type: "string"
        format: "date"
      sexe:
        type: "string"
        description: "Genre enfant"
        enum:
          - "GARCON"
          - "FILLE"
      status:
        type: "string"
        description: "enfant Status"
        enum:
          - "ACCEPTED"
          - "ONLOAD"
          - "REFUSED"
          - "NEW"
      parent:
        type: "integer"
        format: "int64"
      trainingCenter:
        type: "integer"
        format: "int64"
    xml:
      name: "Child"
  ActualityChild:
    type: "object"
    required:
      - "file"
      - "commentaire"
      - "type"
      - "child"
    properties:
      id:
        type: "integer"
        format: "int64"
      file:
        type: "integer"
        format: "int64"
      user:
        type: "integer"
        format: "int64"
      commentaire:
        type: "string"
      creationDate:
        type: "string"
        format: "date"
      type:
        description: "ActualityChild type"
        enum:
          - "INFO"
          - "ATTENTION"
          - "ACTIVITE"
        type: "string"
      child:
        type: "integer"
        format: "int64"
      longitude:
        type: "string"
        description: "City geo location, longitude"
        example: "145.77000000000001"
      latitude:
        type: "string"
        description: "City geo location, latitude"
        example: "-16.920000000000002"
    xml:
      name: "ActualityChild"
  Activity:
    type: "object"
    required:
      - "age"
      - "status"
      - "date_publication"
    properties:
      id:
        type: "integer"
        format: "int64"
      age:
        type: "integer"
      status:
        type: "string"
        description: "Activity Status"
        enum:
          - "DRAFT"
          - "PUBLIC"
      date_publication:
        type: "string"
        format: "date"
      file:
        type: "integer"
        format: "int64"
    xml:
      name: "Activity"
  TrainingCenter:
    type: "object"
    required:
      - "name"
      - "logo"
      - "address"
      - "country"
      - "phone"
      - "status"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      logo:
        type: "integer"
        format: "int64"
      foundationDay:
        type: "string"
        format: "date"
      status:
        enum:
          - "REQUEST"
          - "SUSPENDED"
          - "VALIDATE"
        description: "Center status"
        type: "string"
      address:
        type: "string"
      ville:
        type: "string"
      country:
        type: "string"
      phone:
        type: "string"
      manager:
        type: "integer"
        format: "int64"
    xml:
      name: "TrainingCenter"
  Email:
    type: "object"
    properties:
      email:
        type: "string"
      token:
        type: "string"
    xml:
      name: "Email"
  UserLogin:
    type: "object"
    required:
      - "email"
      - "userPassword"
    properties:
      email:
        type: "string"
      userPassword:
        type: "string"
    xml:
      name: "UserLogin"
  File:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      fileName:
        type: "string"
      path:
        type: "string"
      type:
        type: "string"
        description: "Type of File"
        enum:
          - "COLORIAGE"
      user:
        type: "integer"
        format: "int64"
  Notification:
    type: "object"
    required:
      - "status"
      - "title"
    properties:
      id:
        type: "integer"
        format: "int64"
      status:
        type: "string"
        description: "enfant Status"
        enum:
          - "LUS"
          - "NON_LUS"
          - "ARCHIVES"
      type:
        type: "string"
        description: "type Notification"
        enum:
          - "CREATION"
      destination:
        type: "integer"
        format: "int64"
      url:
        type: "string"
      title:
        type: "string"
      child:
        type: "integer"
        format: "int64"
      creationDate:
        type: "string"
        format: "date"
    xml:
      name: "Notification"
